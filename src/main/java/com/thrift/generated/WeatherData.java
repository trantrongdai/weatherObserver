/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-15")
public class WeatherData implements org.apache.thrift.TBase<WeatherData, WeatherData._Fields>, java.io.Serializable, Cloneable, Comparable<WeatherData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WeatherData");

  private static final org.apache.thrift.protocol.TField STATION_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("stationIp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("temperature", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HUMIDITY_FIELD_DESC = new org.apache.thrift.protocol.TField("humidity", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WIND_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("windSpeed", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("rain", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WeatherDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WeatherDataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String stationIp; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String time; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String temperature; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String humidity; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String windSpeed; // required
  public boolean rain; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATION_IP((short)1, "stationIp"),
    TIME((short)2, "time"),
    TEMPERATURE((short)3, "temperature"),
    HUMIDITY((short)4, "humidity"),
    WIND_SPEED((short)5, "windSpeed"),
    RAIN((short)6, "rain");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATION_IP
          return STATION_IP;
        case 2: // TIME
          return TIME;
        case 3: // TEMPERATURE
          return TEMPERATURE;
        case 4: // HUMIDITY
          return HUMIDITY;
        case 5: // WIND_SPEED
          return WIND_SPEED;
        case 6: // RAIN
          return RAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RAIN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATION_IP, new org.apache.thrift.meta_data.FieldMetaData("stationIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("temperature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HUMIDITY, new org.apache.thrift.meta_data.FieldMetaData("humidity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIND_SPEED, new org.apache.thrift.meta_data.FieldMetaData("windSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RAIN, new org.apache.thrift.meta_data.FieldMetaData("rain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WeatherData.class, metaDataMap);
  }

  public WeatherData() {
  }

  public WeatherData(
    java.lang.String stationIp,
    java.lang.String time,
    java.lang.String temperature,
    java.lang.String humidity,
    java.lang.String windSpeed,
    boolean rain)
  {
    this();
    this.stationIp = stationIp;
    this.time = time;
    this.temperature = temperature;
    this.humidity = humidity;
    this.windSpeed = windSpeed;
    this.rain = rain;
    setRainIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WeatherData(WeatherData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStationIp()) {
      this.stationIp = other.stationIp;
    }
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetTemperature()) {
      this.temperature = other.temperature;
    }
    if (other.isSetHumidity()) {
      this.humidity = other.humidity;
    }
    if (other.isSetWindSpeed()) {
      this.windSpeed = other.windSpeed;
    }
    this.rain = other.rain;
  }

  public WeatherData deepCopy() {
    return new WeatherData(this);
  }

  @Override
  public void clear() {
    this.stationIp = null;
    this.time = null;
    this.temperature = null;
    this.humidity = null;
    this.windSpeed = null;
    setRainIsSet(false);
    this.rain = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStationIp() {
    return this.stationIp;
  }

  public WeatherData setStationIp(@org.apache.thrift.annotation.Nullable java.lang.String stationIp) {
    this.stationIp = stationIp;
    return this;
  }

  public void unsetStationIp() {
    this.stationIp = null;
  }

  /** Returns true if field stationIp is set (has been assigned a value) and false otherwise */
  public boolean isSetStationIp() {
    return this.stationIp != null;
  }

  public void setStationIpIsSet(boolean value) {
    if (!value) {
      this.stationIp = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTime() {
    return this.time;
  }

  public WeatherData setTime(@org.apache.thrift.annotation.Nullable java.lang.String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTemperature() {
    return this.temperature;
  }

  public WeatherData setTemperature(@org.apache.thrift.annotation.Nullable java.lang.String temperature) {
    this.temperature = temperature;
    return this;
  }

  public void unsetTemperature() {
    this.temperature = null;
  }

  /** Returns true if field temperature is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperature() {
    return this.temperature != null;
  }

  public void setTemperatureIsSet(boolean value) {
    if (!value) {
      this.temperature = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHumidity() {
    return this.humidity;
  }

  public WeatherData setHumidity(@org.apache.thrift.annotation.Nullable java.lang.String humidity) {
    this.humidity = humidity;
    return this;
  }

  public void unsetHumidity() {
    this.humidity = null;
  }

  /** Returns true if field humidity is set (has been assigned a value) and false otherwise */
  public boolean isSetHumidity() {
    return this.humidity != null;
  }

  public void setHumidityIsSet(boolean value) {
    if (!value) {
      this.humidity = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWindSpeed() {
    return this.windSpeed;
  }

  public WeatherData setWindSpeed(@org.apache.thrift.annotation.Nullable java.lang.String windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

  public void unsetWindSpeed() {
    this.windSpeed = null;
  }

  /** Returns true if field windSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetWindSpeed() {
    return this.windSpeed != null;
  }

  public void setWindSpeedIsSet(boolean value) {
    if (!value) {
      this.windSpeed = null;
    }
  }

  public boolean isRain() {
    return this.rain;
  }

  public WeatherData setRain(boolean rain) {
    this.rain = rain;
    setRainIsSet(true);
    return this;
  }

  public void unsetRain() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RAIN_ISSET_ID);
  }

  /** Returns true if field rain is set (has been assigned a value) and false otherwise */
  public boolean isSetRain() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RAIN_ISSET_ID);
  }

  public void setRainIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RAIN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATION_IP:
      if (value == null) {
        unsetStationIp();
      } else {
        setStationIp((java.lang.String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((java.lang.String)value);
      }
      break;

    case TEMPERATURE:
      if (value == null) {
        unsetTemperature();
      } else {
        setTemperature((java.lang.String)value);
      }
      break;

    case HUMIDITY:
      if (value == null) {
        unsetHumidity();
      } else {
        setHumidity((java.lang.String)value);
      }
      break;

    case WIND_SPEED:
      if (value == null) {
        unsetWindSpeed();
      } else {
        setWindSpeed((java.lang.String)value);
      }
      break;

    case RAIN:
      if (value == null) {
        unsetRain();
      } else {
        setRain((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATION_IP:
      return getStationIp();

    case TIME:
      return getTime();

    case TEMPERATURE:
      return getTemperature();

    case HUMIDITY:
      return getHumidity();

    case WIND_SPEED:
      return getWindSpeed();

    case RAIN:
      return isRain();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATION_IP:
      return isSetStationIp();
    case TIME:
      return isSetTime();
    case TEMPERATURE:
      return isSetTemperature();
    case HUMIDITY:
      return isSetHumidity();
    case WIND_SPEED:
      return isSetWindSpeed();
    case RAIN:
      return isSetRain();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WeatherData)
      return this.equals((WeatherData)that);
    return false;
  }

  public boolean equals(WeatherData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stationIp = true && this.isSetStationIp();
    boolean that_present_stationIp = true && that.isSetStationIp();
    if (this_present_stationIp || that_present_stationIp) {
      if (!(this_present_stationIp && that_present_stationIp))
        return false;
      if (!this.stationIp.equals(that.stationIp))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_temperature = true && this.isSetTemperature();
    boolean that_present_temperature = true && that.isSetTemperature();
    if (this_present_temperature || that_present_temperature) {
      if (!(this_present_temperature && that_present_temperature))
        return false;
      if (!this.temperature.equals(that.temperature))
        return false;
    }

    boolean this_present_humidity = true && this.isSetHumidity();
    boolean that_present_humidity = true && that.isSetHumidity();
    if (this_present_humidity || that_present_humidity) {
      if (!(this_present_humidity && that_present_humidity))
        return false;
      if (!this.humidity.equals(that.humidity))
        return false;
    }

    boolean this_present_windSpeed = true && this.isSetWindSpeed();
    boolean that_present_windSpeed = true && that.isSetWindSpeed();
    if (this_present_windSpeed || that_present_windSpeed) {
      if (!(this_present_windSpeed && that_present_windSpeed))
        return false;
      if (!this.windSpeed.equals(that.windSpeed))
        return false;
    }

    boolean this_present_rain = true;
    boolean that_present_rain = true;
    if (this_present_rain || that_present_rain) {
      if (!(this_present_rain && that_present_rain))
        return false;
      if (this.rain != that.rain)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStationIp()) ? 131071 : 524287);
    if (isSetStationIp())
      hashCode = hashCode * 8191 + stationIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
    if (isSetTime())
      hashCode = hashCode * 8191 + time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTemperature()) ? 131071 : 524287);
    if (isSetTemperature())
      hashCode = hashCode * 8191 + temperature.hashCode();

    hashCode = hashCode * 8191 + ((isSetHumidity()) ? 131071 : 524287);
    if (isSetHumidity())
      hashCode = hashCode * 8191 + humidity.hashCode();

    hashCode = hashCode * 8191 + ((isSetWindSpeed()) ? 131071 : 524287);
    if (isSetWindSpeed())
      hashCode = hashCode * 8191 + windSpeed.hashCode();

    hashCode = hashCode * 8191 + ((rain) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(WeatherData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStationIp()).compareTo(other.isSetStationIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStationIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stationIp, other.stationIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTemperature()).compareTo(other.isSetTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperature, other.temperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHumidity()).compareTo(other.isSetHumidity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHumidity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.humidity, other.humidity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWindSpeed()).compareTo(other.isSetWindSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.windSpeed, other.windSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRain()).compareTo(other.isSetRain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rain, other.rain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WeatherData(");
    boolean first = true;

    sb.append("stationIp:");
    if (this.stationIp == null) {
      sb.append("null");
    } else {
      sb.append(this.stationIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("temperature:");
    if (this.temperature == null) {
      sb.append("null");
    } else {
      sb.append(this.temperature);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("humidity:");
    if (this.humidity == null) {
      sb.append("null");
    } else {
      sb.append(this.humidity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("windSpeed:");
    if (this.windSpeed == null) {
      sb.append("null");
    } else {
      sb.append(this.windSpeed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rain:");
    sb.append(this.rain);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeatherDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeatherDataStandardScheme getScheme() {
      return new WeatherDataStandardScheme();
    }
  }

  private static class WeatherDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<WeatherData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WeatherData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATION_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stationIp = iprot.readString();
              struct.setStationIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.temperature = iprot.readString();
              struct.setTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HUMIDITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.humidity = iprot.readString();
              struct.setHumidityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WIND_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.windSpeed = iprot.readString();
              struct.setWindSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rain = iprot.readBool();
              struct.setRainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WeatherData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stationIp != null) {
        oprot.writeFieldBegin(STATION_IP_FIELD_DESC);
        oprot.writeString(struct.stationIp);
        oprot.writeFieldEnd();
      }
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.temperature != null) {
        oprot.writeFieldBegin(TEMPERATURE_FIELD_DESC);
        oprot.writeString(struct.temperature);
        oprot.writeFieldEnd();
      }
      if (struct.humidity != null) {
        oprot.writeFieldBegin(HUMIDITY_FIELD_DESC);
        oprot.writeString(struct.humidity);
        oprot.writeFieldEnd();
      }
      if (struct.windSpeed != null) {
        oprot.writeFieldBegin(WIND_SPEED_FIELD_DESC);
        oprot.writeString(struct.windSpeed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RAIN_FIELD_DESC);
      oprot.writeBool(struct.rain);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeatherDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeatherDataTupleScheme getScheme() {
      return new WeatherDataTupleScheme();
    }
  }

  private static class WeatherDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<WeatherData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WeatherData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStationIp()) {
        optionals.set(0);
      }
      if (struct.isSetTime()) {
        optionals.set(1);
      }
      if (struct.isSetTemperature()) {
        optionals.set(2);
      }
      if (struct.isSetHumidity()) {
        optionals.set(3);
      }
      if (struct.isSetWindSpeed()) {
        optionals.set(4);
      }
      if (struct.isSetRain()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetStationIp()) {
        oprot.writeString(struct.stationIp);
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetTemperature()) {
        oprot.writeString(struct.temperature);
      }
      if (struct.isSetHumidity()) {
        oprot.writeString(struct.humidity);
      }
      if (struct.isSetWindSpeed()) {
        oprot.writeString(struct.windSpeed);
      }
      if (struct.isSetRain()) {
        oprot.writeBool(struct.rain);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WeatherData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.stationIp = iprot.readString();
        struct.setStationIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.temperature = iprot.readString();
        struct.setTemperatureIsSet(true);
      }
      if (incoming.get(3)) {
        struct.humidity = iprot.readString();
        struct.setHumidityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.windSpeed = iprot.readString();
        struct.setWindSpeedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rain = iprot.readBool();
        struct.setRainIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

