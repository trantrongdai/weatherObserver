/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.generate2.weatherService;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * WeatherReport definiton.
 * Attention Values will be checked and has to be in a natural range.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-25")
public class WeatherReport implements org.apache.thrift.TBase<WeatherReport, WeatherReport._Fields>, java.io.Serializable, Cloneable, Comparable<WeatherReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WeatherReport");

  private static final org.apache.thrift.protocol.TField REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("report", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("temperature", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField HUMIDITY_FIELD_DESC = new org.apache.thrift.protocol.TField("humidity", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField WIND_STRENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("windStrength", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField RAINFALL_FIELD_DESC = new org.apache.thrift.protocol.TField("rainfall", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ATMOSPHERICPRESSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("atmosphericpressure", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField WIND_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("windDirection", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WeatherReportStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WeatherReportTupleSchemeFactory();

  /**
   * 
   * @see Report
   */
  public @org.apache.thrift.annotation.Nullable Report report; // required
  public @org.apache.thrift.annotation.Nullable Location location; // required
  public double temperature; // required
  public byte humidity; // required
  public byte windStrength; // required
  public double rainfall; // required
  public short atmosphericpressure; // required
  public short windDirection; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String dateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Report
     */
    REPORT((short)1, "report"),
    LOCATION((short)2, "location"),
    TEMPERATURE((short)3, "temperature"),
    HUMIDITY((short)4, "humidity"),
    WIND_STRENGTH((short)5, "windStrength"),
    RAINFALL((short)6, "rainfall"),
    ATMOSPHERICPRESSURE((short)7, "atmosphericpressure"),
    WIND_DIRECTION((short)8, "windDirection"),
    DATE_TIME((short)9, "dateTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPORT
          return REPORT;
        case 2: // LOCATION
          return LOCATION;
        case 3: // TEMPERATURE
          return TEMPERATURE;
        case 4: // HUMIDITY
          return HUMIDITY;
        case 5: // WIND_STRENGTH
          return WIND_STRENGTH;
        case 6: // RAINFALL
          return RAINFALL;
        case 7: // ATMOSPHERICPRESSURE
          return ATMOSPHERICPRESSURE;
        case 8: // WIND_DIRECTION
          return WIND_DIRECTION;
        case 9: // DATE_TIME
          return DATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMPERATURE_ISSET_ID = 0;
  private static final int __HUMIDITY_ISSET_ID = 1;
  private static final int __WINDSTRENGTH_ISSET_ID = 2;
  private static final int __RAINFALL_ISSET_ID = 3;
  private static final int __ATMOSPHERICPRESSURE_ISSET_ID = 4;
  private static final int __WINDDIRECTION_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPORT, new org.apache.thrift.meta_data.FieldMetaData("report", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Report.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("temperature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HUMIDITY, new org.apache.thrift.meta_data.FieldMetaData("humidity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.WIND_STRENGTH, new org.apache.thrift.meta_data.FieldMetaData("windStrength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RAINFALL, new org.apache.thrift.meta_data.FieldMetaData("rainfall", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ATMOSPHERICPRESSURE, new org.apache.thrift.meta_data.FieldMetaData("atmosphericpressure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.WIND_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("windDirection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WeatherReport.class, metaDataMap);
  }

  public WeatherReport() {
  }

  public WeatherReport(
    Report report,
    Location location,
    double temperature,
    byte humidity,
    byte windStrength,
    double rainfall,
    short atmosphericpressure,
    short windDirection,
    java.lang.String dateTime)
  {
    this();
    this.report = report;
    this.location = location;
    this.temperature = temperature;
    setTemperatureIsSet(true);
    this.humidity = humidity;
    setHumidityIsSet(true);
    this.windStrength = windStrength;
    setWindStrengthIsSet(true);
    this.rainfall = rainfall;
    setRainfallIsSet(true);
    this.atmosphericpressure = atmosphericpressure;
    setAtmosphericpressureIsSet(true);
    this.windDirection = windDirection;
    setWindDirectionIsSet(true);
    this.dateTime = dateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WeatherReport(WeatherReport other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReport()) {
      this.report = other.report;
    }
    if (other.isSetLocation()) {
      this.location = new Location(other.location);
    }
    this.temperature = other.temperature;
    this.humidity = other.humidity;
    this.windStrength = other.windStrength;
    this.rainfall = other.rainfall;
    this.atmosphericpressure = other.atmosphericpressure;
    this.windDirection = other.windDirection;
    if (other.isSetDateTime()) {
      this.dateTime = other.dateTime;
    }
  }

  public WeatherReport deepCopy() {
    return new WeatherReport(this);
  }

  @Override
  public void clear() {
    this.report = null;
    this.location = null;
    setTemperatureIsSet(false);
    this.temperature = 0.0;
    setHumidityIsSet(false);
    this.humidity = 0;
    setWindStrengthIsSet(false);
    this.windStrength = 0;
    setRainfallIsSet(false);
    this.rainfall = 0.0;
    setAtmosphericpressureIsSet(false);
    this.atmosphericpressure = 0;
    setWindDirectionIsSet(false);
    this.windDirection = 0;
    this.dateTime = null;
  }

  /**
   * 
   * @see Report
   */
  @org.apache.thrift.annotation.Nullable
  public Report getReport() {
    return this.report;
  }

  /**
   * 
   * @see Report
   */
  public WeatherReport setReport(@org.apache.thrift.annotation.Nullable Report report) {
    this.report = report;
    return this;
  }

  public void unsetReport() {
    this.report = null;
  }

  /** Returns true if field report is set (has been assigned a value) and false otherwise */
  public boolean isSetReport() {
    return this.report != null;
  }

  public void setReportIsSet(boolean value) {
    if (!value) {
      this.report = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Location getLocation() {
    return this.location;
  }

  public WeatherReport setLocation(@org.apache.thrift.annotation.Nullable Location location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public double getTemperature() {
    return this.temperature;
  }

  public WeatherReport setTemperature(double temperature) {
    this.temperature = temperature;
    setTemperatureIsSet(true);
    return this;
  }

  public void unsetTemperature() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TEMPERATURE_ISSET_ID);
  }

  /** Returns true if field temperature is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperature() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TEMPERATURE_ISSET_ID);
  }

  public void setTemperatureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TEMPERATURE_ISSET_ID, value);
  }

  public byte getHumidity() {
    return this.humidity;
  }

  public WeatherReport setHumidity(byte humidity) {
    this.humidity = humidity;
    setHumidityIsSet(true);
    return this;
  }

  public void unsetHumidity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HUMIDITY_ISSET_ID);
  }

  /** Returns true if field humidity is set (has been assigned a value) and false otherwise */
  public boolean isSetHumidity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HUMIDITY_ISSET_ID);
  }

  public void setHumidityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HUMIDITY_ISSET_ID, value);
  }

  public byte getWindStrength() {
    return this.windStrength;
  }

  public WeatherReport setWindStrength(byte windStrength) {
    this.windStrength = windStrength;
    setWindStrengthIsSet(true);
    return this;
  }

  public void unsetWindStrength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDSTRENGTH_ISSET_ID);
  }

  /** Returns true if field windStrength is set (has been assigned a value) and false otherwise */
  public boolean isSetWindStrength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDSTRENGTH_ISSET_ID);
  }

  public void setWindStrengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDSTRENGTH_ISSET_ID, value);
  }

  public double getRainfall() {
    return this.rainfall;
  }

  public WeatherReport setRainfall(double rainfall) {
    this.rainfall = rainfall;
    setRainfallIsSet(true);
    return this;
  }

  public void unsetRainfall() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RAINFALL_ISSET_ID);
  }

  /** Returns true if field rainfall is set (has been assigned a value) and false otherwise */
  public boolean isSetRainfall() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RAINFALL_ISSET_ID);
  }

  public void setRainfallIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RAINFALL_ISSET_ID, value);
  }

  public short getAtmosphericpressure() {
    return this.atmosphericpressure;
  }

  public WeatherReport setAtmosphericpressure(short atmosphericpressure) {
    this.atmosphericpressure = atmosphericpressure;
    setAtmosphericpressureIsSet(true);
    return this;
  }

  public void unsetAtmosphericpressure() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATMOSPHERICPRESSURE_ISSET_ID);
  }

  /** Returns true if field atmosphericpressure is set (has been assigned a value) and false otherwise */
  public boolean isSetAtmosphericpressure() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATMOSPHERICPRESSURE_ISSET_ID);
  }

  public void setAtmosphericpressureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATMOSPHERICPRESSURE_ISSET_ID, value);
  }

  public short getWindDirection() {
    return this.windDirection;
  }

  public WeatherReport setWindDirection(short windDirection) {
    this.windDirection = windDirection;
    setWindDirectionIsSet(true);
    return this;
  }

  public void unsetWindDirection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDDIRECTION_ISSET_ID);
  }

  /** Returns true if field windDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetWindDirection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDDIRECTION_ISSET_ID);
  }

  public void setWindDirectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDDIRECTION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDateTime() {
    return this.dateTime;
  }

  public WeatherReport setDateTime(@org.apache.thrift.annotation.Nullable java.lang.String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  public void unsetDateTime() {
    this.dateTime = null;
  }

  /** Returns true if field dateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTime() {
    return this.dateTime != null;
  }

  public void setDateTimeIsSet(boolean value) {
    if (!value) {
      this.dateTime = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REPORT:
      if (value == null) {
        unsetReport();
      } else {
        setReport((Report)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((Location)value);
      }
      break;

    case TEMPERATURE:
      if (value == null) {
        unsetTemperature();
      } else {
        setTemperature((java.lang.Double)value);
      }
      break;

    case HUMIDITY:
      if (value == null) {
        unsetHumidity();
      } else {
        setHumidity((java.lang.Byte)value);
      }
      break;

    case WIND_STRENGTH:
      if (value == null) {
        unsetWindStrength();
      } else {
        setWindStrength((java.lang.Byte)value);
      }
      break;

    case RAINFALL:
      if (value == null) {
        unsetRainfall();
      } else {
        setRainfall((java.lang.Double)value);
      }
      break;

    case ATMOSPHERICPRESSURE:
      if (value == null) {
        unsetAtmosphericpressure();
      } else {
        setAtmosphericpressure((java.lang.Short)value);
      }
      break;

    case WIND_DIRECTION:
      if (value == null) {
        unsetWindDirection();
      } else {
        setWindDirection((java.lang.Short)value);
      }
      break;

    case DATE_TIME:
      if (value == null) {
        unsetDateTime();
      } else {
        setDateTime((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REPORT:
      return getReport();

    case LOCATION:
      return getLocation();

    case TEMPERATURE:
      return getTemperature();

    case HUMIDITY:
      return getHumidity();

    case WIND_STRENGTH:
      return getWindStrength();

    case RAINFALL:
      return getRainfall();

    case ATMOSPHERICPRESSURE:
      return getAtmosphericpressure();

    case WIND_DIRECTION:
      return getWindDirection();

    case DATE_TIME:
      return getDateTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REPORT:
      return isSetReport();
    case LOCATION:
      return isSetLocation();
    case TEMPERATURE:
      return isSetTemperature();
    case HUMIDITY:
      return isSetHumidity();
    case WIND_STRENGTH:
      return isSetWindStrength();
    case RAINFALL:
      return isSetRainfall();
    case ATMOSPHERICPRESSURE:
      return isSetAtmosphericpressure();
    case WIND_DIRECTION:
      return isSetWindDirection();
    case DATE_TIME:
      return isSetDateTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WeatherReport)
      return this.equals((WeatherReport)that);
    return false;
  }

  public boolean equals(WeatherReport that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_report = true && this.isSetReport();
    boolean that_present_report = true && that.isSetReport();
    if (this_present_report || that_present_report) {
      if (!(this_present_report && that_present_report))
        return false;
      if (!this.report.equals(that.report))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_temperature = true;
    boolean that_present_temperature = true;
    if (this_present_temperature || that_present_temperature) {
      if (!(this_present_temperature && that_present_temperature))
        return false;
      if (this.temperature != that.temperature)
        return false;
    }

    boolean this_present_humidity = true;
    boolean that_present_humidity = true;
    if (this_present_humidity || that_present_humidity) {
      if (!(this_present_humidity && that_present_humidity))
        return false;
      if (this.humidity != that.humidity)
        return false;
    }

    boolean this_present_windStrength = true;
    boolean that_present_windStrength = true;
    if (this_present_windStrength || that_present_windStrength) {
      if (!(this_present_windStrength && that_present_windStrength))
        return false;
      if (this.windStrength != that.windStrength)
        return false;
    }

    boolean this_present_rainfall = true;
    boolean that_present_rainfall = true;
    if (this_present_rainfall || that_present_rainfall) {
      if (!(this_present_rainfall && that_present_rainfall))
        return false;
      if (this.rainfall != that.rainfall)
        return false;
    }

    boolean this_present_atmosphericpressure = true;
    boolean that_present_atmosphericpressure = true;
    if (this_present_atmosphericpressure || that_present_atmosphericpressure) {
      if (!(this_present_atmosphericpressure && that_present_atmosphericpressure))
        return false;
      if (this.atmosphericpressure != that.atmosphericpressure)
        return false;
    }

    boolean this_present_windDirection = true;
    boolean that_present_windDirection = true;
    if (this_present_windDirection || that_present_windDirection) {
      if (!(this_present_windDirection && that_present_windDirection))
        return false;
      if (this.windDirection != that.windDirection)
        return false;
    }

    boolean this_present_dateTime = true && this.isSetDateTime();
    boolean that_present_dateTime = true && that.isSetDateTime();
    if (this_present_dateTime || that_present_dateTime) {
      if (!(this_present_dateTime && that_present_dateTime))
        return false;
      if (!this.dateTime.equals(that.dateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReport()) ? 131071 : 524287);
    if (isSetReport())
      hashCode = hashCode * 8191 + report.getValue();

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(temperature);

    hashCode = hashCode * 8191 + (int) (humidity);

    hashCode = hashCode * 8191 + (int) (windStrength);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rainfall);

    hashCode = hashCode * 8191 + atmosphericpressure;

    hashCode = hashCode * 8191 + windDirection;

    hashCode = hashCode * 8191 + ((isSetDateTime()) ? 131071 : 524287);
    if (isSetDateTime())
      hashCode = hashCode * 8191 + dateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WeatherReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetReport()).compareTo(other.isSetReport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report, other.report);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTemperature()).compareTo(other.isSetTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperature, other.temperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHumidity()).compareTo(other.isSetHumidity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHumidity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.humidity, other.humidity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWindStrength()).compareTo(other.isSetWindStrength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindStrength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.windStrength, other.windStrength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRainfall()).compareTo(other.isSetRainfall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRainfall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rainfall, other.rainfall);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAtmosphericpressure()).compareTo(other.isSetAtmosphericpressure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtmosphericpressure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atmosphericpressure, other.atmosphericpressure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWindDirection()).compareTo(other.isSetWindDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.windDirection, other.windDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDateTime()).compareTo(other.isSetDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, other.dateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WeatherReport(");
    boolean first = true;

    sb.append("report:");
    if (this.report == null) {
      sb.append("null");
    } else {
      sb.append(this.report);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("temperature:");
    sb.append(this.temperature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("humidity:");
    sb.append(this.humidity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("windStrength:");
    sb.append(this.windStrength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rainfall:");
    sb.append(this.rainfall);
    first = false;
    if (!first) sb.append(", ");
    sb.append("atmosphericpressure:");
    sb.append(this.atmosphericpressure);
    first = false;
    if (!first) sb.append(", ");
    sb.append("windDirection:");
    sb.append(this.windDirection);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateTime:");
    if (this.dateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.dateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (location != null) {
      location.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeatherReportStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeatherReportStandardScheme getScheme() {
      return new WeatherReportStandardScheme();
    }
  }

  private static class WeatherReportStandardScheme extends org.apache.thrift.scheme.StandardScheme<WeatherReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WeatherReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.report = com.thrift.generate2.weatherService.Report.findByValue(iprot.readI32());
              struct.setReportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new Location();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.temperature = iprot.readDouble();
              struct.setTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HUMIDITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.humidity = iprot.readByte();
              struct.setHumidityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WIND_STRENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.windStrength = iprot.readByte();
              struct.setWindStrengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RAINFALL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rainfall = iprot.readDouble();
              struct.setRainfallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ATMOSPHERICPRESSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.atmosphericpressure = iprot.readI16();
              struct.setAtmosphericpressureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WIND_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.windDirection = iprot.readI16();
              struct.setWindDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateTime = iprot.readString();
              struct.setDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WeatherReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.report != null) {
        oprot.writeFieldBegin(REPORT_FIELD_DESC);
        oprot.writeI32(struct.report.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        struct.location.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEMPERATURE_FIELD_DESC);
      oprot.writeDouble(struct.temperature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HUMIDITY_FIELD_DESC);
      oprot.writeByte(struct.humidity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIND_STRENGTH_FIELD_DESC);
      oprot.writeByte(struct.windStrength);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAINFALL_FIELD_DESC);
      oprot.writeDouble(struct.rainfall);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATMOSPHERICPRESSURE_FIELD_DESC);
      oprot.writeI16(struct.atmosphericpressure);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIND_DIRECTION_FIELD_DESC);
      oprot.writeI16(struct.windDirection);
      oprot.writeFieldEnd();
      if (struct.dateTime != null) {
        oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
        oprot.writeString(struct.dateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeatherReportTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeatherReportTupleScheme getScheme() {
      return new WeatherReportTupleScheme();
    }
  }

  private static class WeatherReportTupleScheme extends org.apache.thrift.scheme.TupleScheme<WeatherReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WeatherReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReport()) {
        optionals.set(0);
      }
      if (struct.isSetLocation()) {
        optionals.set(1);
      }
      if (struct.isSetTemperature()) {
        optionals.set(2);
      }
      if (struct.isSetHumidity()) {
        optionals.set(3);
      }
      if (struct.isSetWindStrength()) {
        optionals.set(4);
      }
      if (struct.isSetRainfall()) {
        optionals.set(5);
      }
      if (struct.isSetAtmosphericpressure()) {
        optionals.set(6);
      }
      if (struct.isSetWindDirection()) {
        optionals.set(7);
      }
      if (struct.isSetDateTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetReport()) {
        oprot.writeI32(struct.report.getValue());
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
      if (struct.isSetTemperature()) {
        oprot.writeDouble(struct.temperature);
      }
      if (struct.isSetHumidity()) {
        oprot.writeByte(struct.humidity);
      }
      if (struct.isSetWindStrength()) {
        oprot.writeByte(struct.windStrength);
      }
      if (struct.isSetRainfall()) {
        oprot.writeDouble(struct.rainfall);
      }
      if (struct.isSetAtmosphericpressure()) {
        oprot.writeI16(struct.atmosphericpressure);
      }
      if (struct.isSetWindDirection()) {
        oprot.writeI16(struct.windDirection);
      }
      if (struct.isSetDateTime()) {
        oprot.writeString(struct.dateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WeatherReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.report = com.thrift.generate2.weatherService.Report.findByValue(iprot.readI32());
        struct.setReportIsSet(true);
      }
      if (incoming.get(1)) {
        struct.location = new Location();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.temperature = iprot.readDouble();
        struct.setTemperatureIsSet(true);
      }
      if (incoming.get(3)) {
        struct.humidity = iprot.readByte();
        struct.setHumidityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.windStrength = iprot.readByte();
        struct.setWindStrengthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rainfall = iprot.readDouble();
        struct.setRainfallIsSet(true);
      }
      if (incoming.get(6)) {
        struct.atmosphericpressure = iprot.readI16();
        struct.setAtmosphericpressureIsSet(true);
      }
      if (incoming.get(7)) {
        struct.windDirection = iprot.readI16();
        struct.setWindDirectionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dateTime = iprot.readString();
        struct.setDateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

