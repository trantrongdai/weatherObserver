/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.generate2.weatherService;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-25")
public class Weather {

  /**
   * Weather service definition
   */
  public interface Iface {

    public long login(Location location) throws LocationException, org.apache.thrift.TException;

    public boolean logout(long sessionToken) throws UnknownUserException, org.apache.thrift.TException;

    public boolean sendWeatherReport(WeatherReport report, long sessionToken) throws UnknownUserException, ReportException, DateException, LocationException, org.apache.thrift.TException;

    public WeatherReport receiveForecastFor(long userId, java.lang.String time) throws UnknownUserException, DateException, org.apache.thrift.TException;

    public WeatherWarning checkWeatherWarnings(long userId) throws UnknownUserException, org.apache.thrift.TException;

    public boolean sendWarning(SystemWarning systemWarning, long userId) throws UnknownUserException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void login(Location location, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void logout(long sessionToken, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void sendWeatherReport(WeatherReport report, long sessionToken, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void receiveForecastFor(long userId, java.lang.String time, org.apache.thrift.async.AsyncMethodCallback<WeatherReport> resultHandler) throws org.apache.thrift.TException;

    public void checkWeatherWarnings(long userId, org.apache.thrift.async.AsyncMethodCallback<WeatherWarning> resultHandler) throws org.apache.thrift.TException;

    public void sendWarning(SystemWarning systemWarning, long userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long login(Location location) throws LocationException, org.apache.thrift.TException
    {
      send_login(location);
      return recv_login();
    }

    public void send_login(Location location) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setLocation(location);
      sendBase("login", args);
    }

    public long recv_login() throws LocationException, org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.locationException != null) {
        throw result.locationException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public boolean logout(long sessionToken) throws UnknownUserException, org.apache.thrift.TException
    {
      send_logout(sessionToken);
      return recv_logout();
    }

    public void send_logout(long sessionToken) throws org.apache.thrift.TException
    {
      logout_args args = new logout_args();
      args.setSessionToken(sessionToken);
      sendBase("logout", args);
    }

    public boolean recv_logout() throws UnknownUserException, org.apache.thrift.TException
    {
      logout_result result = new logout_result();
      receiveBase(result, "logout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknownUserException != null) {
        throw result.unknownUserException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "logout failed: unknown result");
    }

    public boolean sendWeatherReport(WeatherReport report, long sessionToken) throws UnknownUserException, ReportException, DateException, LocationException, org.apache.thrift.TException
    {
      send_sendWeatherReport(report, sessionToken);
      return recv_sendWeatherReport();
    }

    public void send_sendWeatherReport(WeatherReport report, long sessionToken) throws org.apache.thrift.TException
    {
      sendWeatherReport_args args = new sendWeatherReport_args();
      args.setReport(report);
      args.setSessionToken(sessionToken);
      sendBase("sendWeatherReport", args);
    }

    public boolean recv_sendWeatherReport() throws UnknownUserException, ReportException, DateException, LocationException, org.apache.thrift.TException
    {
      sendWeatherReport_result result = new sendWeatherReport_result();
      receiveBase(result, "sendWeatherReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknownUserException != null) {
        throw result.unknownUserException;
      }
      if (result.reportException != null) {
        throw result.reportException;
      }
      if (result.dateException != null) {
        throw result.dateException;
      }
      if (result.locationException != null) {
        throw result.locationException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendWeatherReport failed: unknown result");
    }

    public WeatherReport receiveForecastFor(long userId, java.lang.String time) throws UnknownUserException, DateException, org.apache.thrift.TException
    {
      send_receiveForecastFor(userId, time);
      return recv_receiveForecastFor();
    }

    public void send_receiveForecastFor(long userId, java.lang.String time) throws org.apache.thrift.TException
    {
      receiveForecastFor_args args = new receiveForecastFor_args();
      args.setUserId(userId);
      args.setTime(time);
      sendBase("receiveForecastFor", args);
    }

    public WeatherReport recv_receiveForecastFor() throws UnknownUserException, DateException, org.apache.thrift.TException
    {
      receiveForecastFor_result result = new receiveForecastFor_result();
      receiveBase(result, "receiveForecastFor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknownUserException != null) {
        throw result.unknownUserException;
      }
      if (result.dateException != null) {
        throw result.dateException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveForecastFor failed: unknown result");
    }

    public WeatherWarning checkWeatherWarnings(long userId) throws UnknownUserException, org.apache.thrift.TException
    {
      send_checkWeatherWarnings(userId);
      return recv_checkWeatherWarnings();
    }

    public void send_checkWeatherWarnings(long userId) throws org.apache.thrift.TException
    {
      checkWeatherWarnings_args args = new checkWeatherWarnings_args();
      args.setUserId(userId);
      sendBase("checkWeatherWarnings", args);
    }

    public WeatherWarning recv_checkWeatherWarnings() throws UnknownUserException, org.apache.thrift.TException
    {
      checkWeatherWarnings_result result = new checkWeatherWarnings_result();
      receiveBase(result, "checkWeatherWarnings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknownUserException != null) {
        throw result.unknownUserException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkWeatherWarnings failed: unknown result");
    }

    public boolean sendWarning(SystemWarning systemWarning, long userId) throws UnknownUserException, org.apache.thrift.TException
    {
      send_sendWarning(systemWarning, userId);
      return recv_sendWarning();
    }

    public void send_sendWarning(SystemWarning systemWarning, long userId) throws org.apache.thrift.TException
    {
      sendWarning_args args = new sendWarning_args();
      args.setSystemWarning(systemWarning);
      args.setUserId(userId);
      sendBase("sendWarning", args);
    }

    public boolean recv_sendWarning() throws UnknownUserException, org.apache.thrift.TException
    {
      sendWarning_result result = new sendWarning_result();
      receiveBase(result, "sendWarning");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknownUserException != null) {
        throw result.unknownUserException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendWarning failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void login(Location location, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(location, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private Location location;
      public login_call(Location location, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.location = location;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setLocation(location);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws LocationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void logout(long sessionToken, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logout_call method_call = new logout_call(sessionToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logout_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private long sessionToken;
      public logout_call(long sessionToken, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionToken = sessionToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logout_args args = new logout_args();
        args.setSessionToken(sessionToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws UnknownUserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_logout();
      }
    }

    public void sendWeatherReport(WeatherReport report, long sessionToken, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendWeatherReport_call method_call = new sendWeatherReport_call(report, sessionToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendWeatherReport_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private WeatherReport report;
      private long sessionToken;
      public sendWeatherReport_call(WeatherReport report, long sessionToken, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.report = report;
        this.sessionToken = sessionToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendWeatherReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendWeatherReport_args args = new sendWeatherReport_args();
        args.setReport(report);
        args.setSessionToken(sessionToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws UnknownUserException, ReportException, DateException, LocationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendWeatherReport();
      }
    }

    public void receiveForecastFor(long userId, java.lang.String time, org.apache.thrift.async.AsyncMethodCallback<WeatherReport> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveForecastFor_call method_call = new receiveForecastFor_call(userId, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveForecastFor_call extends org.apache.thrift.async.TAsyncMethodCall<WeatherReport> {
      private long userId;
      private java.lang.String time;
      public receiveForecastFor_call(long userId, java.lang.String time, org.apache.thrift.async.AsyncMethodCallback<WeatherReport> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveForecastFor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveForecastFor_args args = new receiveForecastFor_args();
        args.setUserId(userId);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WeatherReport getResult() throws UnknownUserException, DateException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveForecastFor();
      }
    }

    public void checkWeatherWarnings(long userId, org.apache.thrift.async.AsyncMethodCallback<WeatherWarning> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkWeatherWarnings_call method_call = new checkWeatherWarnings_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkWeatherWarnings_call extends org.apache.thrift.async.TAsyncMethodCall<WeatherWarning> {
      private long userId;
      public checkWeatherWarnings_call(long userId, org.apache.thrift.async.AsyncMethodCallback<WeatherWarning> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkWeatherWarnings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkWeatherWarnings_args args = new checkWeatherWarnings_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WeatherWarning getResult() throws UnknownUserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkWeatherWarnings();
      }
    }

    public void sendWarning(SystemWarning systemWarning, long userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendWarning_call method_call = new sendWarning_call(systemWarning, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendWarning_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private SystemWarning systemWarning;
      private long userId;
      public sendWarning_call(SystemWarning systemWarning, long userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.systemWarning = systemWarning;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendWarning", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendWarning_args args = new sendWarning_args();
        args.setSystemWarning(systemWarning);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws UnknownUserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendWarning();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("login", new login());
      processMap.put("logout", new logout());
      processMap.put("sendWeatherReport", new sendWeatherReport());
      processMap.put("receiveForecastFor", new receiveForecastFor());
      processMap.put("checkWeatherWarnings", new checkWeatherWarnings());
      processMap.put("sendWarning", new sendWarning());
      return processMap;
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        try {
          result.success = iface.login(args.location);
          result.setSuccessIsSet(true);
        } catch (LocationException locationException) {
          result.locationException = locationException;
        }
        return result;
      }
    }

    public static class logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logout_args> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public logout_result getResult(I iface, logout_args args) throws org.apache.thrift.TException {
        logout_result result = new logout_result();
        try {
          result.success = iface.logout(args.sessionToken);
          result.setSuccessIsSet(true);
        } catch (UnknownUserException unknownUserException) {
          result.unknownUserException = unknownUserException;
        }
        return result;
      }
    }

    public static class sendWeatherReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendWeatherReport_args> {
      public sendWeatherReport() {
        super("sendWeatherReport");
      }

      public sendWeatherReport_args getEmptyArgsInstance() {
        return new sendWeatherReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sendWeatherReport_result getResult(I iface, sendWeatherReport_args args) throws org.apache.thrift.TException {
        sendWeatherReport_result result = new sendWeatherReport_result();
        try {
          result.success = iface.sendWeatherReport(args.report, args.sessionToken);
          result.setSuccessIsSet(true);
        } catch (UnknownUserException unknownUserException) {
          result.unknownUserException = unknownUserException;
        } catch (ReportException reportException) {
          result.reportException = reportException;
        } catch (DateException dateException) {
          result.dateException = dateException;
        } catch (LocationException locationException) {
          result.locationException = locationException;
        }
        return result;
      }
    }

    public static class receiveForecastFor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveForecastFor_args> {
      public receiveForecastFor() {
        super("receiveForecastFor");
      }

      public receiveForecastFor_args getEmptyArgsInstance() {
        return new receiveForecastFor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public receiveForecastFor_result getResult(I iface, receiveForecastFor_args args) throws org.apache.thrift.TException {
        receiveForecastFor_result result = new receiveForecastFor_result();
        try {
          result.success = iface.receiveForecastFor(args.userId, args.time);
        } catch (UnknownUserException unknownUserException) {
          result.unknownUserException = unknownUserException;
        } catch (DateException dateException) {
          result.dateException = dateException;
        }
        return result;
      }
    }

    public static class checkWeatherWarnings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkWeatherWarnings_args> {
      public checkWeatherWarnings() {
        super("checkWeatherWarnings");
      }

      public checkWeatherWarnings_args getEmptyArgsInstance() {
        return new checkWeatherWarnings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkWeatherWarnings_result getResult(I iface, checkWeatherWarnings_args args) throws org.apache.thrift.TException {
        checkWeatherWarnings_result result = new checkWeatherWarnings_result();
        try {
          result.success = iface.checkWeatherWarnings(args.userId);
        } catch (UnknownUserException unknownUserException) {
          result.unknownUserException = unknownUserException;
        }
        return result;
      }
    }

    public static class sendWarning<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendWarning_args> {
      public sendWarning() {
        super("sendWarning");
      }

      public sendWarning_args getEmptyArgsInstance() {
        return new sendWarning_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sendWarning_result getResult(I iface, sendWarning_args args) throws org.apache.thrift.TException {
        sendWarning_result result = new sendWarning_result();
        try {
          result.success = iface.sendWarning(args.systemWarning, args.userId);
          result.setSuccessIsSet(true);
        } catch (UnknownUserException unknownUserException) {
          result.unknownUserException = unknownUserException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("login", new login());
      processMap.put("logout", new logout());
      processMap.put("sendWeatherReport", new sendWeatherReport());
      processMap.put("receiveForecastFor", new receiveForecastFor());
      processMap.put("checkWeatherWarnings", new checkWeatherWarnings());
      processMap.put("sendWarning", new sendWarning());
      return processMap;
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, java.lang.Long> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            login_result result = new login_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            login_result result = new login_result();
            if (e instanceof LocationException) {
              result.locationException = (LocationException) e;
              result.setLocationExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.login(args.location,resultHandler);
      }
    }

    public static class logout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logout_args, java.lang.Boolean> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            logout_result result = new logout_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logout_result result = new logout_result();
            if (e instanceof UnknownUserException) {
              result.unknownUserException = (UnknownUserException) e;
              result.setUnknownUserExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logout_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.logout(args.sessionToken,resultHandler);
      }
    }

    public static class sendWeatherReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendWeatherReport_args, java.lang.Boolean> {
      public sendWeatherReport() {
        super("sendWeatherReport");
      }

      public sendWeatherReport_args getEmptyArgsInstance() {
        return new sendWeatherReport_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            sendWeatherReport_result result = new sendWeatherReport_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendWeatherReport_result result = new sendWeatherReport_result();
            if (e instanceof UnknownUserException) {
              result.unknownUserException = (UnknownUserException) e;
              result.setUnknownUserExceptionIsSet(true);
              msg = result;
            } else if (e instanceof ReportException) {
              result.reportException = (ReportException) e;
              result.setReportExceptionIsSet(true);
              msg = result;
            } else if (e instanceof DateException) {
              result.dateException = (DateException) e;
              result.setDateExceptionIsSet(true);
              msg = result;
            } else if (e instanceof LocationException) {
              result.locationException = (LocationException) e;
              result.setLocationExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendWeatherReport_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.sendWeatherReport(args.report, args.sessionToken,resultHandler);
      }
    }

    public static class receiveForecastFor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveForecastFor_args, WeatherReport> {
      public receiveForecastFor() {
        super("receiveForecastFor");
      }

      public receiveForecastFor_args getEmptyArgsInstance() {
        return new receiveForecastFor_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WeatherReport> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WeatherReport>() { 
          public void onComplete(WeatherReport o) {
            receiveForecastFor_result result = new receiveForecastFor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            receiveForecastFor_result result = new receiveForecastFor_result();
            if (e instanceof UnknownUserException) {
              result.unknownUserException = (UnknownUserException) e;
              result.setUnknownUserExceptionIsSet(true);
              msg = result;
            } else if (e instanceof DateException) {
              result.dateException = (DateException) e;
              result.setDateExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveForecastFor_args args, org.apache.thrift.async.AsyncMethodCallback<WeatherReport> resultHandler) throws org.apache.thrift.TException {
        iface.receiveForecastFor(args.userId, args.time,resultHandler);
      }
    }

    public static class checkWeatherWarnings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkWeatherWarnings_args, WeatherWarning> {
      public checkWeatherWarnings() {
        super("checkWeatherWarnings");
      }

      public checkWeatherWarnings_args getEmptyArgsInstance() {
        return new checkWeatherWarnings_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WeatherWarning> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WeatherWarning>() { 
          public void onComplete(WeatherWarning o) {
            checkWeatherWarnings_result result = new checkWeatherWarnings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkWeatherWarnings_result result = new checkWeatherWarnings_result();
            if (e instanceof UnknownUserException) {
              result.unknownUserException = (UnknownUserException) e;
              result.setUnknownUserExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkWeatherWarnings_args args, org.apache.thrift.async.AsyncMethodCallback<WeatherWarning> resultHandler) throws org.apache.thrift.TException {
        iface.checkWeatherWarnings(args.userId,resultHandler);
      }
    }

    public static class sendWarning<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendWarning_args, java.lang.Boolean> {
      public sendWarning() {
        super("sendWarning");
      }

      public sendWarning_args getEmptyArgsInstance() {
        return new sendWarning_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            sendWarning_result result = new sendWarning_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendWarning_result result = new sendWarning_result();
            if (e instanceof UnknownUserException) {
              result.unknownUserException = (UnknownUserException) e;
              result.setUnknownUserExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendWarning_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.sendWarning(args.systemWarning, args.userId,resultHandler);
      }
    }

  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Location location; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCATION((short)1, "location");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCATION
            return LOCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      Location location)
    {
      this();
      this.location = location;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetLocation()) {
        this.location = new Location(other.location);
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.location = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Location getLocation() {
      return this.location;
    }

    public login_args setLocation(@org.apache.thrift.annotation.Nullable Location location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((Location)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCATION:
        return getLocation();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCATION:
        return isSetLocation();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
      if (isSetLocation())
        hashCode = hashCode * 8191 + location.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("login_args(");
      boolean first = true;

      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (location != null) {
        location.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new Location();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.location = new Location();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField LOCATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("locationException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_resultTupleSchemeFactory();

    public long success; // required
    public @org.apache.thrift.annotation.Nullable LocationException locationException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LOCATION_EXCEPTION((short)1, "locationException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LOCATION_EXCEPTION
            return LOCATION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LOCATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("locationException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LocationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      long success,
      LocationException locationException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.locationException = locationException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetLocationException()) {
        this.locationException = new LocationException(other.locationException);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.locationException = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public login_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public LocationException getLocationException() {
      return this.locationException;
    }

    public login_result setLocationException(@org.apache.thrift.annotation.Nullable LocationException locationException) {
      this.locationException = locationException;
      return this;
    }

    public void unsetLocationException() {
      this.locationException = null;
    }

    /** Returns true if field locationException is set (has been assigned a value) and false otherwise */
    public boolean isSetLocationException() {
      return this.locationException != null;
    }

    public void setLocationExceptionIsSet(boolean value) {
      if (!value) {
        this.locationException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case LOCATION_EXCEPTION:
        if (value == null) {
          unsetLocationException();
        } else {
          setLocationException((LocationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LOCATION_EXCEPTION:
        return getLocationException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LOCATION_EXCEPTION:
        return isSetLocationException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_locationException = true && this.isSetLocationException();
      boolean that_present_locationException = true && that.isSetLocationException();
      if (this_present_locationException || that_present_locationException) {
        if (!(this_present_locationException && that_present_locationException))
          return false;
        if (!this.locationException.equals(that.locationException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetLocationException()) ? 131071 : 524287);
      if (isSetLocationException())
        hashCode = hashCode * 8191 + locationException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocationException()).compareTo(other.isSetLocationException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocationException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationException, other.locationException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("locationException:");
      if (this.locationException == null) {
        sb.append("null");
      } else {
        sb.append(this.locationException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LOCATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.locationException = new LocationException();
                struct.locationException.read(iprot);
                struct.setLocationExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.locationException != null) {
          oprot.writeFieldBegin(LOCATION_EXCEPTION_FIELD_DESC);
          struct.locationException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLocationException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetLocationException()) {
          struct.locationException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.locationException = new LocationException();
          struct.locationException.read(iprot);
          struct.setLocationExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logout_args implements org.apache.thrift.TBase<logout_args, logout_args._Fields>, java.io.Serializable, Cloneable, Comparable<logout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_args");

    private static final org.apache.thrift.protocol.TField SESSION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionToken", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logout_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logout_argsTupleSchemeFactory();

    public long sessionToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_TOKEN((short)1, "sessionToken");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_TOKEN
            return SESSION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONTOKEN_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("sessionToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_args.class, metaDataMap);
    }

    public logout_args() {
    }

    public logout_args(
      long sessionToken)
    {
      this();
      this.sessionToken = sessionToken;
      setSessionTokenIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_args(logout_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionToken = other.sessionToken;
    }

    public logout_args deepCopy() {
      return new logout_args(this);
    }

    @Override
    public void clear() {
      setSessionTokenIsSet(false);
      this.sessionToken = 0;
    }

    public long getSessionToken() {
      return this.sessionToken;
    }

    public logout_args setSessionToken(long sessionToken) {
      this.sessionToken = sessionToken;
      setSessionTokenIsSet(true);
      return this;
    }

    public void unsetSessionToken() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONTOKEN_ISSET_ID);
    }

    /** Returns true if field sessionToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionToken() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONTOKEN_ISSET_ID);
    }

    public void setSessionTokenIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONTOKEN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SESSION_TOKEN:
        if (value == null) {
          unsetSessionToken();
        } else {
          setSessionToken((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_TOKEN:
        return getSessionToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION_TOKEN:
        return isSetSessionToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_args)
        return this.equals((logout_args)that);
      return false;
    }

    public boolean equals(logout_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionToken = true;
      boolean that_present_sessionToken = true;
      if (this_present_sessionToken || that_present_sessionToken) {
        if (!(this_present_sessionToken && that_present_sessionToken))
          return false;
        if (this.sessionToken != that.sessionToken)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionToken);

      return hashCode;
    }

    @Override
    public int compareTo(logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSessionToken()).compareTo(other.isSetSessionToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionToken, other.sessionToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logout_args(");
      boolean first = true;

      sb.append("sessionToken:");
      sb.append(this.sessionToken);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_argsStandardScheme getScheme() {
        return new logout_argsStandardScheme();
      }
    }

    private static class logout_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionToken = iprot.readI64();
                struct.setSessionTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_TOKEN_FIELD_DESC);
        oprot.writeI64(struct.sessionToken);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_argsTupleScheme getScheme() {
        return new logout_argsTupleScheme();
      }
    }

    private static class logout_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSessionToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionToken()) {
          oprot.writeI64(struct.sessionToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionToken = iprot.readI64();
          struct.setSessionTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logout_result implements org.apache.thrift.TBase<logout_result, logout_result._Fields>, java.io.Serializable, Cloneable, Comparable<logout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownUserException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logout_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logout_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_USER_EXCEPTION((short)1, "unknownUserException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_USER_EXCEPTION
            return UNKNOWN_USER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNKNOWN_USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unknownUserException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnknownUserException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_result.class, metaDataMap);
    }

    public logout_result() {
    }

    public logout_result(
      boolean success,
      UnknownUserException unknownUserException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.unknownUserException = unknownUserException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_result(logout_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUnknownUserException()) {
        this.unknownUserException = new UnknownUserException(other.unknownUserException);
      }
    }

    public logout_result deepCopy() {
      return new logout_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.unknownUserException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public logout_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public UnknownUserException getUnknownUserException() {
      return this.unknownUserException;
    }

    public logout_result setUnknownUserException(@org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException) {
      this.unknownUserException = unknownUserException;
      return this;
    }

    public void unsetUnknownUserException() {
      this.unknownUserException = null;
    }

    /** Returns true if field unknownUserException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknownUserException() {
      return this.unknownUserException != null;
    }

    public void setUnknownUserExceptionIsSet(boolean value) {
      if (!value) {
        this.unknownUserException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case UNKNOWN_USER_EXCEPTION:
        if (value == null) {
          unsetUnknownUserException();
        } else {
          setUnknownUserException((UnknownUserException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UNKNOWN_USER_EXCEPTION:
        return getUnknownUserException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_USER_EXCEPTION:
        return isSetUnknownUserException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_result)
        return this.equals((logout_result)that);
      return false;
    }

    public boolean equals(logout_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_unknownUserException = true && this.isSetUnknownUserException();
      boolean that_present_unknownUserException = true && that.isSetUnknownUserException();
      if (this_present_unknownUserException || that_present_unknownUserException) {
        if (!(this_present_unknownUserException && that_present_unknownUserException))
          return false;
        if (!this.unknownUserException.equals(that.unknownUserException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetUnknownUserException()) ? 131071 : 524287);
      if (isSetUnknownUserException())
        hashCode = hashCode * 8191 + unknownUserException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnknownUserException()).compareTo(other.isSetUnknownUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknownUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownUserException, other.unknownUserException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logout_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknownUserException:");
      if (this.unknownUserException == null) {
        sb.append("null");
      } else {
        sb.append(this.unknownUserException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_resultStandardScheme getScheme() {
        return new logout_resultStandardScheme();
      }
    }

    private static class logout_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknownUserException = new UnknownUserException();
                struct.unknownUserException.read(iprot);
                struct.setUnknownUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unknownUserException != null) {
          oprot.writeFieldBegin(UNKNOWN_USER_EXCEPTION_FIELD_DESC);
          struct.unknownUserException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_resultTupleScheme getScheme() {
        return new logout_resultTupleScheme();
      }
    }

    private static class logout_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknownUserException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUnknownUserException()) {
          struct.unknownUserException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknownUserException = new UnknownUserException();
          struct.unknownUserException.read(iprot);
          struct.setUnknownUserExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendWeatherReport_args implements org.apache.thrift.TBase<sendWeatherReport_args, sendWeatherReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendWeatherReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendWeatherReport_args");

    private static final org.apache.thrift.protocol.TField REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("report", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionToken", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendWeatherReport_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendWeatherReport_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable WeatherReport report; // required
    public long sessionToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT((short)1, "report"),
      SESSION_TOKEN((short)2, "sessionToken");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT
            return REPORT;
          case 2: // SESSION_TOKEN
            return SESSION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONTOKEN_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT, new org.apache.thrift.meta_data.FieldMetaData("report", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WeatherReport.class)));
      tmpMap.put(_Fields.SESSION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("sessionToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendWeatherReport_args.class, metaDataMap);
    }

    public sendWeatherReport_args() {
    }

    public sendWeatherReport_args(
      WeatherReport report,
      long sessionToken)
    {
      this();
      this.report = report;
      this.sessionToken = sessionToken;
      setSessionTokenIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendWeatherReport_args(sendWeatherReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReport()) {
        this.report = new WeatherReport(other.report);
      }
      this.sessionToken = other.sessionToken;
    }

    public sendWeatherReport_args deepCopy() {
      return new sendWeatherReport_args(this);
    }

    @Override
    public void clear() {
      this.report = null;
      setSessionTokenIsSet(false);
      this.sessionToken = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public WeatherReport getReport() {
      return this.report;
    }

    public sendWeatherReport_args setReport(@org.apache.thrift.annotation.Nullable WeatherReport report) {
      this.report = report;
      return this;
    }

    public void unsetReport() {
      this.report = null;
    }

    /** Returns true if field report is set (has been assigned a value) and false otherwise */
    public boolean isSetReport() {
      return this.report != null;
    }

    public void setReportIsSet(boolean value) {
      if (!value) {
        this.report = null;
      }
    }

    public long getSessionToken() {
      return this.sessionToken;
    }

    public sendWeatherReport_args setSessionToken(long sessionToken) {
      this.sessionToken = sessionToken;
      setSessionTokenIsSet(true);
      return this;
    }

    public void unsetSessionToken() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONTOKEN_ISSET_ID);
    }

    /** Returns true if field sessionToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionToken() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONTOKEN_ISSET_ID);
    }

    public void setSessionTokenIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONTOKEN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REPORT:
        if (value == null) {
          unsetReport();
        } else {
          setReport((WeatherReport)value);
        }
        break;

      case SESSION_TOKEN:
        if (value == null) {
          unsetSessionToken();
        } else {
          setSessionToken((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT:
        return getReport();

      case SESSION_TOKEN:
        return getSessionToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REPORT:
        return isSetReport();
      case SESSION_TOKEN:
        return isSetSessionToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendWeatherReport_args)
        return this.equals((sendWeatherReport_args)that);
      return false;
    }

    public boolean equals(sendWeatherReport_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_report = true && this.isSetReport();
      boolean that_present_report = true && that.isSetReport();
      if (this_present_report || that_present_report) {
        if (!(this_present_report && that_present_report))
          return false;
        if (!this.report.equals(that.report))
          return false;
      }

      boolean this_present_sessionToken = true;
      boolean that_present_sessionToken = true;
      if (this_present_sessionToken || that_present_sessionToken) {
        if (!(this_present_sessionToken && that_present_sessionToken))
          return false;
        if (this.sessionToken != that.sessionToken)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetReport()) ? 131071 : 524287);
      if (isSetReport())
        hashCode = hashCode * 8191 + report.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionToken);

      return hashCode;
    }

    @Override
    public int compareTo(sendWeatherReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetReport()).compareTo(other.isSetReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report, other.report);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionToken()).compareTo(other.isSetSessionToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionToken, other.sessionToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendWeatherReport_args(");
      boolean first = true;

      sb.append("report:");
      if (this.report == null) {
        sb.append("null");
      } else {
        sb.append(this.report);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionToken:");
      sb.append(this.sessionToken);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (report != null) {
        report.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendWeatherReport_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWeatherReport_argsStandardScheme getScheme() {
        return new sendWeatherReport_argsStandardScheme();
      }
    }

    private static class sendWeatherReport_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendWeatherReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendWeatherReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.report = new WeatherReport();
                struct.report.read(iprot);
                struct.setReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionToken = iprot.readI64();
                struct.setSessionTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendWeatherReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.report != null) {
          oprot.writeFieldBegin(REPORT_FIELD_DESC);
          struct.report.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SESSION_TOKEN_FIELD_DESC);
        oprot.writeI64(struct.sessionToken);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendWeatherReport_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWeatherReport_argsTupleScheme getScheme() {
        return new sendWeatherReport_argsTupleScheme();
      }
    }

    private static class sendWeatherReport_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendWeatherReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendWeatherReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetReport()) {
          optionals.set(0);
        }
        if (struct.isSetSessionToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReport()) {
          struct.report.write(oprot);
        }
        if (struct.isSetSessionToken()) {
          oprot.writeI64(struct.sessionToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendWeatherReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.report = new WeatherReport();
          struct.report.read(iprot);
          struct.setReportIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionToken = iprot.readI64();
          struct.setSessionTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendWeatherReport_result implements org.apache.thrift.TBase<sendWeatherReport_result, sendWeatherReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendWeatherReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendWeatherReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownUserException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REPORT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reportException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dateException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField LOCATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("locationException", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendWeatherReport_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendWeatherReport_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException; // required
    public @org.apache.thrift.annotation.Nullable ReportException reportException; // required
    public @org.apache.thrift.annotation.Nullable DateException dateException; // required
    public @org.apache.thrift.annotation.Nullable LocationException locationException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_USER_EXCEPTION((short)1, "unknownUserException"),
      REPORT_EXCEPTION((short)2, "reportException"),
      DATE_EXCEPTION((short)3, "dateException"),
      LOCATION_EXCEPTION((short)4, "locationException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_USER_EXCEPTION
            return UNKNOWN_USER_EXCEPTION;
          case 2: // REPORT_EXCEPTION
            return REPORT_EXCEPTION;
          case 3: // DATE_EXCEPTION
            return DATE_EXCEPTION;
          case 4: // LOCATION_EXCEPTION
            return LOCATION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNKNOWN_USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unknownUserException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnknownUserException.class)));
      tmpMap.put(_Fields.REPORT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reportException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportException.class)));
      tmpMap.put(_Fields.DATE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dateException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateException.class)));
      tmpMap.put(_Fields.LOCATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("locationException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LocationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendWeatherReport_result.class, metaDataMap);
    }

    public sendWeatherReport_result() {
    }

    public sendWeatherReport_result(
      boolean success,
      UnknownUserException unknownUserException,
      ReportException reportException,
      DateException dateException,
      LocationException locationException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.unknownUserException = unknownUserException;
      this.reportException = reportException;
      this.dateException = dateException;
      this.locationException = locationException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendWeatherReport_result(sendWeatherReport_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUnknownUserException()) {
        this.unknownUserException = new UnknownUserException(other.unknownUserException);
      }
      if (other.isSetReportException()) {
        this.reportException = new ReportException(other.reportException);
      }
      if (other.isSetDateException()) {
        this.dateException = new DateException(other.dateException);
      }
      if (other.isSetLocationException()) {
        this.locationException = new LocationException(other.locationException);
      }
    }

    public sendWeatherReport_result deepCopy() {
      return new sendWeatherReport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.unknownUserException = null;
      this.reportException = null;
      this.dateException = null;
      this.locationException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendWeatherReport_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public UnknownUserException getUnknownUserException() {
      return this.unknownUserException;
    }

    public sendWeatherReport_result setUnknownUserException(@org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException) {
      this.unknownUserException = unknownUserException;
      return this;
    }

    public void unsetUnknownUserException() {
      this.unknownUserException = null;
    }

    /** Returns true if field unknownUserException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknownUserException() {
      return this.unknownUserException != null;
    }

    public void setUnknownUserExceptionIsSet(boolean value) {
      if (!value) {
        this.unknownUserException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ReportException getReportException() {
      return this.reportException;
    }

    public sendWeatherReport_result setReportException(@org.apache.thrift.annotation.Nullable ReportException reportException) {
      this.reportException = reportException;
      return this;
    }

    public void unsetReportException() {
      this.reportException = null;
    }

    /** Returns true if field reportException is set (has been assigned a value) and false otherwise */
    public boolean isSetReportException() {
      return this.reportException != null;
    }

    public void setReportExceptionIsSet(boolean value) {
      if (!value) {
        this.reportException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DateException getDateException() {
      return this.dateException;
    }

    public sendWeatherReport_result setDateException(@org.apache.thrift.annotation.Nullable DateException dateException) {
      this.dateException = dateException;
      return this;
    }

    public void unsetDateException() {
      this.dateException = null;
    }

    /** Returns true if field dateException is set (has been assigned a value) and false otherwise */
    public boolean isSetDateException() {
      return this.dateException != null;
    }

    public void setDateExceptionIsSet(boolean value) {
      if (!value) {
        this.dateException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public LocationException getLocationException() {
      return this.locationException;
    }

    public sendWeatherReport_result setLocationException(@org.apache.thrift.annotation.Nullable LocationException locationException) {
      this.locationException = locationException;
      return this;
    }

    public void unsetLocationException() {
      this.locationException = null;
    }

    /** Returns true if field locationException is set (has been assigned a value) and false otherwise */
    public boolean isSetLocationException() {
      return this.locationException != null;
    }

    public void setLocationExceptionIsSet(boolean value) {
      if (!value) {
        this.locationException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case UNKNOWN_USER_EXCEPTION:
        if (value == null) {
          unsetUnknownUserException();
        } else {
          setUnknownUserException((UnknownUserException)value);
        }
        break;

      case REPORT_EXCEPTION:
        if (value == null) {
          unsetReportException();
        } else {
          setReportException((ReportException)value);
        }
        break;

      case DATE_EXCEPTION:
        if (value == null) {
          unsetDateException();
        } else {
          setDateException((DateException)value);
        }
        break;

      case LOCATION_EXCEPTION:
        if (value == null) {
          unsetLocationException();
        } else {
          setLocationException((LocationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UNKNOWN_USER_EXCEPTION:
        return getUnknownUserException();

      case REPORT_EXCEPTION:
        return getReportException();

      case DATE_EXCEPTION:
        return getDateException();

      case LOCATION_EXCEPTION:
        return getLocationException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_USER_EXCEPTION:
        return isSetUnknownUserException();
      case REPORT_EXCEPTION:
        return isSetReportException();
      case DATE_EXCEPTION:
        return isSetDateException();
      case LOCATION_EXCEPTION:
        return isSetLocationException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendWeatherReport_result)
        return this.equals((sendWeatherReport_result)that);
      return false;
    }

    public boolean equals(sendWeatherReport_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_unknownUserException = true && this.isSetUnknownUserException();
      boolean that_present_unknownUserException = true && that.isSetUnknownUserException();
      if (this_present_unknownUserException || that_present_unknownUserException) {
        if (!(this_present_unknownUserException && that_present_unknownUserException))
          return false;
        if (!this.unknownUserException.equals(that.unknownUserException))
          return false;
      }

      boolean this_present_reportException = true && this.isSetReportException();
      boolean that_present_reportException = true && that.isSetReportException();
      if (this_present_reportException || that_present_reportException) {
        if (!(this_present_reportException && that_present_reportException))
          return false;
        if (!this.reportException.equals(that.reportException))
          return false;
      }

      boolean this_present_dateException = true && this.isSetDateException();
      boolean that_present_dateException = true && that.isSetDateException();
      if (this_present_dateException || that_present_dateException) {
        if (!(this_present_dateException && that_present_dateException))
          return false;
        if (!this.dateException.equals(that.dateException))
          return false;
      }

      boolean this_present_locationException = true && this.isSetLocationException();
      boolean that_present_locationException = true && that.isSetLocationException();
      if (this_present_locationException || that_present_locationException) {
        if (!(this_present_locationException && that_present_locationException))
          return false;
        if (!this.locationException.equals(that.locationException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetUnknownUserException()) ? 131071 : 524287);
      if (isSetUnknownUserException())
        hashCode = hashCode * 8191 + unknownUserException.hashCode();

      hashCode = hashCode * 8191 + ((isSetReportException()) ? 131071 : 524287);
      if (isSetReportException())
        hashCode = hashCode * 8191 + reportException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDateException()) ? 131071 : 524287);
      if (isSetDateException())
        hashCode = hashCode * 8191 + dateException.hashCode();

      hashCode = hashCode * 8191 + ((isSetLocationException()) ? 131071 : 524287);
      if (isSetLocationException())
        hashCode = hashCode * 8191 + locationException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendWeatherReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnknownUserException()).compareTo(other.isSetUnknownUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknownUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownUserException, other.unknownUserException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReportException()).compareTo(other.isSetReportException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportException, other.reportException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDateException()).compareTo(other.isSetDateException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateException, other.dateException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLocationException()).compareTo(other.isSetLocationException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocationException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationException, other.locationException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendWeatherReport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknownUserException:");
      if (this.unknownUserException == null) {
        sb.append("null");
      } else {
        sb.append(this.unknownUserException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reportException:");
      if (this.reportException == null) {
        sb.append("null");
      } else {
        sb.append(this.reportException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dateException:");
      if (this.dateException == null) {
        sb.append("null");
      } else {
        sb.append(this.dateException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locationException:");
      if (this.locationException == null) {
        sb.append("null");
      } else {
        sb.append(this.locationException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendWeatherReport_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWeatherReport_resultStandardScheme getScheme() {
        return new sendWeatherReport_resultStandardScheme();
      }
    }

    private static class sendWeatherReport_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendWeatherReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendWeatherReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknownUserException = new UnknownUserException();
                struct.unknownUserException.read(iprot);
                struct.setUnknownUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPORT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reportException = new ReportException();
                struct.reportException.read(iprot);
                struct.setReportExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dateException = new DateException();
                struct.dateException.read(iprot);
                struct.setDateExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOCATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.locationException = new LocationException();
                struct.locationException.read(iprot);
                struct.setLocationExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendWeatherReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unknownUserException != null) {
          oprot.writeFieldBegin(UNKNOWN_USER_EXCEPTION_FIELD_DESC);
          struct.unknownUserException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reportException != null) {
          oprot.writeFieldBegin(REPORT_EXCEPTION_FIELD_DESC);
          struct.reportException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dateException != null) {
          oprot.writeFieldBegin(DATE_EXCEPTION_FIELD_DESC);
          struct.dateException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.locationException != null) {
          oprot.writeFieldBegin(LOCATION_EXCEPTION_FIELD_DESC);
          struct.locationException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendWeatherReport_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWeatherReport_resultTupleScheme getScheme() {
        return new sendWeatherReport_resultTupleScheme();
      }
    }

    private static class sendWeatherReport_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendWeatherReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendWeatherReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknownUserException()) {
          optionals.set(1);
        }
        if (struct.isSetReportException()) {
          optionals.set(2);
        }
        if (struct.isSetDateException()) {
          optionals.set(3);
        }
        if (struct.isSetLocationException()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUnknownUserException()) {
          struct.unknownUserException.write(oprot);
        }
        if (struct.isSetReportException()) {
          struct.reportException.write(oprot);
        }
        if (struct.isSetDateException()) {
          struct.dateException.write(oprot);
        }
        if (struct.isSetLocationException()) {
          struct.locationException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendWeatherReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknownUserException = new UnknownUserException();
          struct.unknownUserException.read(iprot);
          struct.setUnknownUserExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.reportException = new ReportException();
          struct.reportException.read(iprot);
          struct.setReportExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dateException = new DateException();
          struct.dateException.read(iprot);
          struct.setDateExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.locationException = new LocationException();
          struct.locationException.read(iprot);
          struct.setLocationExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class receiveForecastFor_args implements org.apache.thrift.TBase<receiveForecastFor_args, receiveForecastFor_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveForecastFor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveForecastFor_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new receiveForecastFor_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new receiveForecastFor_argsTupleSchemeFactory();

    public long userId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      TIME((short)2, "time");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "dateTime")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveForecastFor_args.class, metaDataMap);
    }

    public receiveForecastFor_args() {
    }

    public receiveForecastFor_args(
      long userId,
      java.lang.String time)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveForecastFor_args(receiveForecastFor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public receiveForecastFor_args deepCopy() {
      return new receiveForecastFor_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.time = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public receiveForecastFor_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTime() {
      return this.time;
    }

    public receiveForecastFor_args setTime(@org.apache.thrift.annotation.Nullable java.lang.String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Long)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case TIME:
        return getTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case TIME:
        return isSetTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveForecastFor_args)
        return this.equals((receiveForecastFor_args)that);
      return false;
    }

    public boolean equals(receiveForecastFor_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userId);

      hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
      if (isSetTime())
        hashCode = hashCode * 8191 + time.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(receiveForecastFor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("receiveForecastFor_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveForecastFor_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public receiveForecastFor_argsStandardScheme getScheme() {
        return new receiveForecastFor_argsStandardScheme();
      }
    }

    private static class receiveForecastFor_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<receiveForecastFor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveForecastFor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveForecastFor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveForecastFor_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public receiveForecastFor_argsTupleScheme getScheme() {
        return new receiveForecastFor_argsTupleScheme();
      }
    }

    private static class receiveForecastFor_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<receiveForecastFor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveForecastFor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveForecastFor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class receiveForecastFor_result implements org.apache.thrift.TBase<receiveForecastFor_result, receiveForecastFor_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveForecastFor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveForecastFor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownUserException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dateException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new receiveForecastFor_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new receiveForecastFor_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable WeatherReport success; // required
    public @org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException; // required
    public @org.apache.thrift.annotation.Nullable DateException dateException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_USER_EXCEPTION((short)1, "unknownUserException"),
      DATE_EXCEPTION((short)2, "dateException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_USER_EXCEPTION
            return UNKNOWN_USER_EXCEPTION;
          case 2: // DATE_EXCEPTION
            return DATE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "WeatherForecast")));
      tmpMap.put(_Fields.UNKNOWN_USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unknownUserException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnknownUserException.class)));
      tmpMap.put(_Fields.DATE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dateException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveForecastFor_result.class, metaDataMap);
    }

    public receiveForecastFor_result() {
    }

    public receiveForecastFor_result(
      WeatherReport success,
      UnknownUserException unknownUserException,
      DateException dateException)
    {
      this();
      this.success = success;
      this.unknownUserException = unknownUserException;
      this.dateException = dateException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveForecastFor_result(receiveForecastFor_result other) {
      if (other.isSetSuccess()) {
        this.success = new WeatherReport(other.success);
      }
      if (other.isSetUnknownUserException()) {
        this.unknownUserException = new UnknownUserException(other.unknownUserException);
      }
      if (other.isSetDateException()) {
        this.dateException = new DateException(other.dateException);
      }
    }

    public receiveForecastFor_result deepCopy() {
      return new receiveForecastFor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknownUserException = null;
      this.dateException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public WeatherReport getSuccess() {
      return this.success;
    }

    public receiveForecastFor_result setSuccess(@org.apache.thrift.annotation.Nullable WeatherReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnknownUserException getUnknownUserException() {
      return this.unknownUserException;
    }

    public receiveForecastFor_result setUnknownUserException(@org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException) {
      this.unknownUserException = unknownUserException;
      return this;
    }

    public void unsetUnknownUserException() {
      this.unknownUserException = null;
    }

    /** Returns true if field unknownUserException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknownUserException() {
      return this.unknownUserException != null;
    }

    public void setUnknownUserExceptionIsSet(boolean value) {
      if (!value) {
        this.unknownUserException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DateException getDateException() {
      return this.dateException;
    }

    public receiveForecastFor_result setDateException(@org.apache.thrift.annotation.Nullable DateException dateException) {
      this.dateException = dateException;
      return this;
    }

    public void unsetDateException() {
      this.dateException = null;
    }

    /** Returns true if field dateException is set (has been assigned a value) and false otherwise */
    public boolean isSetDateException() {
      return this.dateException != null;
    }

    public void setDateExceptionIsSet(boolean value) {
      if (!value) {
        this.dateException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WeatherReport)value);
        }
        break;

      case UNKNOWN_USER_EXCEPTION:
        if (value == null) {
          unsetUnknownUserException();
        } else {
          setUnknownUserException((UnknownUserException)value);
        }
        break;

      case DATE_EXCEPTION:
        if (value == null) {
          unsetDateException();
        } else {
          setDateException((DateException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_USER_EXCEPTION:
        return getUnknownUserException();

      case DATE_EXCEPTION:
        return getDateException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_USER_EXCEPTION:
        return isSetUnknownUserException();
      case DATE_EXCEPTION:
        return isSetDateException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveForecastFor_result)
        return this.equals((receiveForecastFor_result)that);
      return false;
    }

    public boolean equals(receiveForecastFor_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknownUserException = true && this.isSetUnknownUserException();
      boolean that_present_unknownUserException = true && that.isSetUnknownUserException();
      if (this_present_unknownUserException || that_present_unknownUserException) {
        if (!(this_present_unknownUserException && that_present_unknownUserException))
          return false;
        if (!this.unknownUserException.equals(that.unknownUserException))
          return false;
      }

      boolean this_present_dateException = true && this.isSetDateException();
      boolean that_present_dateException = true && that.isSetDateException();
      if (this_present_dateException || that_present_dateException) {
        if (!(this_present_dateException && that_present_dateException))
          return false;
        if (!this.dateException.equals(that.dateException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnknownUserException()) ? 131071 : 524287);
      if (isSetUnknownUserException())
        hashCode = hashCode * 8191 + unknownUserException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDateException()) ? 131071 : 524287);
      if (isSetDateException())
        hashCode = hashCode * 8191 + dateException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(receiveForecastFor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnknownUserException()).compareTo(other.isSetUnknownUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknownUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownUserException, other.unknownUserException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDateException()).compareTo(other.isSetDateException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateException, other.dateException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("receiveForecastFor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknownUserException:");
      if (this.unknownUserException == null) {
        sb.append("null");
      } else {
        sb.append(this.unknownUserException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dateException:");
      if (this.dateException == null) {
        sb.append("null");
      } else {
        sb.append(this.dateException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveForecastFor_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public receiveForecastFor_resultStandardScheme getScheme() {
        return new receiveForecastFor_resultStandardScheme();
      }
    }

    private static class receiveForecastFor_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<receiveForecastFor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveForecastFor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WeatherReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknownUserException = new UnknownUserException();
                struct.unknownUserException.read(iprot);
                struct.setUnknownUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dateException = new DateException();
                struct.dateException.read(iprot);
                struct.setDateExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveForecastFor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknownUserException != null) {
          oprot.writeFieldBegin(UNKNOWN_USER_EXCEPTION_FIELD_DESC);
          struct.unknownUserException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dateException != null) {
          oprot.writeFieldBegin(DATE_EXCEPTION_FIELD_DESC);
          struct.dateException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveForecastFor_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public receiveForecastFor_resultTupleScheme getScheme() {
        return new receiveForecastFor_resultTupleScheme();
      }
    }

    private static class receiveForecastFor_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<receiveForecastFor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveForecastFor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknownUserException()) {
          optionals.set(1);
        }
        if (struct.isSetDateException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnknownUserException()) {
          struct.unknownUserException.write(oprot);
        }
        if (struct.isSetDateException()) {
          struct.dateException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveForecastFor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new WeatherReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknownUserException = new UnknownUserException();
          struct.unknownUserException.read(iprot);
          struct.setUnknownUserExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dateException = new DateException();
          struct.dateException.read(iprot);
          struct.setDateExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkWeatherWarnings_args implements org.apache.thrift.TBase<checkWeatherWarnings_args, checkWeatherWarnings_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkWeatherWarnings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWeatherWarnings_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkWeatherWarnings_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkWeatherWarnings_argsTupleSchemeFactory();

    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWeatherWarnings_args.class, metaDataMap);
    }

    public checkWeatherWarnings_args() {
    }

    public checkWeatherWarnings_args(
      long userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWeatherWarnings_args(checkWeatherWarnings_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public checkWeatherWarnings_args deepCopy() {
      return new checkWeatherWarnings_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public checkWeatherWarnings_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWeatherWarnings_args)
        return this.equals((checkWeatherWarnings_args)that);
      return false;
    }

    public boolean equals(checkWeatherWarnings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userId);

      return hashCode;
    }

    @Override
    public int compareTo(checkWeatherWarnings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkWeatherWarnings_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWeatherWarnings_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkWeatherWarnings_argsStandardScheme getScheme() {
        return new checkWeatherWarnings_argsStandardScheme();
      }
    }

    private static class checkWeatherWarnings_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkWeatherWarnings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWeatherWarnings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWeatherWarnings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWeatherWarnings_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkWeatherWarnings_argsTupleScheme getScheme() {
        return new checkWeatherWarnings_argsTupleScheme();
      }
    }

    private static class checkWeatherWarnings_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkWeatherWarnings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWeatherWarnings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWeatherWarnings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkWeatherWarnings_result implements org.apache.thrift.TBase<checkWeatherWarnings_result, checkWeatherWarnings_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkWeatherWarnings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWeatherWarnings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownUserException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkWeatherWarnings_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkWeatherWarnings_resultTupleSchemeFactory();

    /**
     * 
     * @see WeatherWarning
     */
    public @org.apache.thrift.annotation.Nullable WeatherWarning success; // required
    public @org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see WeatherWarning
       */
      SUCCESS((short)0, "success"),
      UNKNOWN_USER_EXCEPTION((short)1, "unknownUserException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_USER_EXCEPTION
            return UNKNOWN_USER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WeatherWarning.class)));
      tmpMap.put(_Fields.UNKNOWN_USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unknownUserException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnknownUserException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWeatherWarnings_result.class, metaDataMap);
    }

    public checkWeatherWarnings_result() {
    }

    public checkWeatherWarnings_result(
      WeatherWarning success,
      UnknownUserException unknownUserException)
    {
      this();
      this.success = success;
      this.unknownUserException = unknownUserException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWeatherWarnings_result(checkWeatherWarnings_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUnknownUserException()) {
        this.unknownUserException = new UnknownUserException(other.unknownUserException);
      }
    }

    public checkWeatherWarnings_result deepCopy() {
      return new checkWeatherWarnings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknownUserException = null;
    }

    /**
     * 
     * @see WeatherWarning
     */
    @org.apache.thrift.annotation.Nullable
    public WeatherWarning getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see WeatherWarning
     */
    public checkWeatherWarnings_result setSuccess(@org.apache.thrift.annotation.Nullable WeatherWarning success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnknownUserException getUnknownUserException() {
      return this.unknownUserException;
    }

    public checkWeatherWarnings_result setUnknownUserException(@org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException) {
      this.unknownUserException = unknownUserException;
      return this;
    }

    public void unsetUnknownUserException() {
      this.unknownUserException = null;
    }

    /** Returns true if field unknownUserException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknownUserException() {
      return this.unknownUserException != null;
    }

    public void setUnknownUserExceptionIsSet(boolean value) {
      if (!value) {
        this.unknownUserException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WeatherWarning)value);
        }
        break;

      case UNKNOWN_USER_EXCEPTION:
        if (value == null) {
          unsetUnknownUserException();
        } else {
          setUnknownUserException((UnknownUserException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_USER_EXCEPTION:
        return getUnknownUserException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_USER_EXCEPTION:
        return isSetUnknownUserException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWeatherWarnings_result)
        return this.equals((checkWeatherWarnings_result)that);
      return false;
    }

    public boolean equals(checkWeatherWarnings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknownUserException = true && this.isSetUnknownUserException();
      boolean that_present_unknownUserException = true && that.isSetUnknownUserException();
      if (this_present_unknownUserException || that_present_unknownUserException) {
        if (!(this_present_unknownUserException && that_present_unknownUserException))
          return false;
        if (!this.unknownUserException.equals(that.unknownUserException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetUnknownUserException()) ? 131071 : 524287);
      if (isSetUnknownUserException())
        hashCode = hashCode * 8191 + unknownUserException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkWeatherWarnings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnknownUserException()).compareTo(other.isSetUnknownUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknownUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownUserException, other.unknownUserException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkWeatherWarnings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknownUserException:");
      if (this.unknownUserException == null) {
        sb.append("null");
      } else {
        sb.append(this.unknownUserException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWeatherWarnings_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkWeatherWarnings_resultStandardScheme getScheme() {
        return new checkWeatherWarnings_resultStandardScheme();
      }
    }

    private static class checkWeatherWarnings_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkWeatherWarnings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWeatherWarnings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = thrift.generate2.weatherService.WeatherWarning.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknownUserException = new UnknownUserException();
                struct.unknownUserException.read(iprot);
                struct.setUnknownUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWeatherWarnings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.unknownUserException != null) {
          oprot.writeFieldBegin(UNKNOWN_USER_EXCEPTION_FIELD_DESC);
          struct.unknownUserException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWeatherWarnings_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkWeatherWarnings_resultTupleScheme getScheme() {
        return new checkWeatherWarnings_resultTupleScheme();
      }
    }

    private static class checkWeatherWarnings_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkWeatherWarnings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWeatherWarnings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknownUserException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetUnknownUserException()) {
          struct.unknownUserException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWeatherWarnings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = thrift.generate2.weatherService.WeatherWarning.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknownUserException = new UnknownUserException();
          struct.unknownUserException.read(iprot);
          struct.setUnknownUserExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendWarning_args implements org.apache.thrift.TBase<sendWarning_args, sendWarning_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendWarning_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendWarning_args");

    private static final org.apache.thrift.protocol.TField SYSTEM_WARNING_FIELD_DESC = new org.apache.thrift.protocol.TField("systemWarning", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendWarning_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendWarning_argsTupleSchemeFactory();

    /**
     * 
     * @see SystemWarning
     */
    public @org.apache.thrift.annotation.Nullable SystemWarning systemWarning; // required
    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see SystemWarning
       */
      SYSTEM_WARNING((short)1, "systemWarning"),
      USER_ID((short)2, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYSTEM_WARNING
            return SYSTEM_WARNING;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYSTEM_WARNING, new org.apache.thrift.meta_data.FieldMetaData("systemWarning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SystemWarning.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendWarning_args.class, metaDataMap);
    }

    public sendWarning_args() {
    }

    public sendWarning_args(
      SystemWarning systemWarning,
      long userId)
    {
      this();
      this.systemWarning = systemWarning;
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendWarning_args(sendWarning_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSystemWarning()) {
        this.systemWarning = other.systemWarning;
      }
      this.userId = other.userId;
    }

    public sendWarning_args deepCopy() {
      return new sendWarning_args(this);
    }

    @Override
    public void clear() {
      this.systemWarning = null;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    /**
     * 
     * @see SystemWarning
     */
    @org.apache.thrift.annotation.Nullable
    public SystemWarning getSystemWarning() {
      return this.systemWarning;
    }

    /**
     * 
     * @see SystemWarning
     */
    public sendWarning_args setSystemWarning(@org.apache.thrift.annotation.Nullable SystemWarning systemWarning) {
      this.systemWarning = systemWarning;
      return this;
    }

    public void unsetSystemWarning() {
      this.systemWarning = null;
    }

    /** Returns true if field systemWarning is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemWarning() {
      return this.systemWarning != null;
    }

    public void setSystemWarningIsSet(boolean value) {
      if (!value) {
        this.systemWarning = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public sendWarning_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SYSTEM_WARNING:
        if (value == null) {
          unsetSystemWarning();
        } else {
          setSystemWarning((SystemWarning)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SYSTEM_WARNING:
        return getSystemWarning();

      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SYSTEM_WARNING:
        return isSetSystemWarning();
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendWarning_args)
        return this.equals((sendWarning_args)that);
      return false;
    }

    public boolean equals(sendWarning_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_systemWarning = true && this.isSetSystemWarning();
      boolean that_present_systemWarning = true && that.isSetSystemWarning();
      if (this_present_systemWarning || that_present_systemWarning) {
        if (!(this_present_systemWarning && that_present_systemWarning))
          return false;
        if (!this.systemWarning.equals(that.systemWarning))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSystemWarning()) ? 131071 : 524287);
      if (isSetSystemWarning())
        hashCode = hashCode * 8191 + systemWarning.getValue();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userId);

      return hashCode;
    }

    @Override
    public int compareTo(sendWarning_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSystemWarning()).compareTo(other.isSetSystemWarning());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemWarning()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemWarning, other.systemWarning);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendWarning_args(");
      boolean first = true;

      sb.append("systemWarning:");
      if (this.systemWarning == null) {
        sb.append("null");
      } else {
        sb.append(this.systemWarning);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendWarning_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWarning_argsStandardScheme getScheme() {
        return new sendWarning_argsStandardScheme();
      }
    }

    private static class sendWarning_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendWarning_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendWarning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYSTEM_WARNING
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.systemWarning = thrift.generate2.weatherService.SystemWarning.findByValue(iprot.readI32());
                struct.setSystemWarningIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendWarning_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.systemWarning != null) {
          oprot.writeFieldBegin(SYSTEM_WARNING_FIELD_DESC);
          oprot.writeI32(struct.systemWarning.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendWarning_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWarning_argsTupleScheme getScheme() {
        return new sendWarning_argsTupleScheme();
      }
    }

    private static class sendWarning_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendWarning_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendWarning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSystemWarning()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSystemWarning()) {
          oprot.writeI32(struct.systemWarning.getValue());
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendWarning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.systemWarning = thrift.generate2.weatherService.SystemWarning.findByValue(iprot.readI32());
          struct.setSystemWarningIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendWarning_result implements org.apache.thrift.TBase<sendWarning_result, sendWarning_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendWarning_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendWarning_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownUserException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendWarning_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendWarning_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_USER_EXCEPTION((short)1, "unknownUserException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_USER_EXCEPTION
            return UNKNOWN_USER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNKNOWN_USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unknownUserException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnknownUserException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendWarning_result.class, metaDataMap);
    }

    public sendWarning_result() {
    }

    public sendWarning_result(
      boolean success,
      UnknownUserException unknownUserException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.unknownUserException = unknownUserException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendWarning_result(sendWarning_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUnknownUserException()) {
        this.unknownUserException = new UnknownUserException(other.unknownUserException);
      }
    }

    public sendWarning_result deepCopy() {
      return new sendWarning_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.unknownUserException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendWarning_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public UnknownUserException getUnknownUserException() {
      return this.unknownUserException;
    }

    public sendWarning_result setUnknownUserException(@org.apache.thrift.annotation.Nullable UnknownUserException unknownUserException) {
      this.unknownUserException = unknownUserException;
      return this;
    }

    public void unsetUnknownUserException() {
      this.unknownUserException = null;
    }

    /** Returns true if field unknownUserException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknownUserException() {
      return this.unknownUserException != null;
    }

    public void setUnknownUserExceptionIsSet(boolean value) {
      if (!value) {
        this.unknownUserException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case UNKNOWN_USER_EXCEPTION:
        if (value == null) {
          unsetUnknownUserException();
        } else {
          setUnknownUserException((UnknownUserException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UNKNOWN_USER_EXCEPTION:
        return getUnknownUserException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_USER_EXCEPTION:
        return isSetUnknownUserException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendWarning_result)
        return this.equals((sendWarning_result)that);
      return false;
    }

    public boolean equals(sendWarning_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_unknownUserException = true && this.isSetUnknownUserException();
      boolean that_present_unknownUserException = true && that.isSetUnknownUserException();
      if (this_present_unknownUserException || that_present_unknownUserException) {
        if (!(this_present_unknownUserException && that_present_unknownUserException))
          return false;
        if (!this.unknownUserException.equals(that.unknownUserException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetUnknownUserException()) ? 131071 : 524287);
      if (isSetUnknownUserException())
        hashCode = hashCode * 8191 + unknownUserException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendWarning_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnknownUserException()).compareTo(other.isSetUnknownUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknownUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownUserException, other.unknownUserException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendWarning_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknownUserException:");
      if (this.unknownUserException == null) {
        sb.append("null");
      } else {
        sb.append(this.unknownUserException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendWarning_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWarning_resultStandardScheme getScheme() {
        return new sendWarning_resultStandardScheme();
      }
    }

    private static class sendWarning_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendWarning_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendWarning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknownUserException = new UnknownUserException();
                struct.unknownUserException.read(iprot);
                struct.setUnknownUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendWarning_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unknownUserException != null) {
          oprot.writeFieldBegin(UNKNOWN_USER_EXCEPTION_FIELD_DESC);
          struct.unknownUserException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendWarning_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendWarning_resultTupleScheme getScheme() {
        return new sendWarning_resultTupleScheme();
      }
    }

    private static class sendWarning_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendWarning_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendWarning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknownUserException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUnknownUserException()) {
          struct.unknownUserException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendWarning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknownUserException = new UnknownUserException();
          struct.unknownUserException.read(iprot);
          struct.setUnknownUserExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
